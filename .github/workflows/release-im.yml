name: Release IM contract

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: 'What type of new version to release?'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
        default: minor

permissions:
  contents: write

env:
  MODULE_SUBDIR_NAME: im

jobs:
  generate-data-contract:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 'nucleus-contract' repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up buf
        uses: bufbuild/buf-action@v1
        with:
          setup_only: true

      - name: Install protoc-gen-go
        run: go install google.golang.org/protobuf/cmd/protoc-gen-go@latest

      - name: Get latest version tag and increase ${{ inputs.versionType }} version
        id: createVersion
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --list '${{ env.MODULE_SUBDIR_NAME }}/v*' --sort=-v:refname | head -n 1)
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          VERSION=${LATEST_TAG#${{ env.MODULE_SUBDIR_NAME }}/v}
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            major=0
            minor=0
            patch=0
          else
            IFS='.' read -r major minor patch <<< "$VERSION"
          fi
          case "${{ inputs.versionType }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          NEW_VERSION="${{ env.MODULE_SUBDIR_NAME }}/v$major.$minor.$patch"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          if [ "$major" -ge 2 ]; then
            echo "major_version_suffix=/v$major" >> $GITHUB_OUTPUT
          else
            echo "major_version_suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Check breaking changes
        if: inputs.versionType != 'major'
        run: |
          if ! buf breaking ${{ env.MODULE_SUBDIR_NAME }}-proto --against ".git#tag=${{ steps.createVersion.outputs.latest_tag }},subdir=${{ env.MODULE_SUBDIR_NAME }}-proto"; then
            echo "⚠️ Breaking changes detected in '${{ env.MODULE_SUBDIR_NAME }}-proto'. Only a 'major' version can be released."
            exit 1
          fi

      - name: Generate stubs
        run: |
          buf dep update
          buf generate --template buf.gen.${{ env.MODULE_SUBDIR_NAME }}.yaml

      - name: Initialize or update Go module
        working-directory: ${{ env.MODULE_SUBDIR_NAME }}
        run: |
          if [ ! -f go.mod ]; then
            go mod init github.com/${{ github.repository }}/${{ env.MODULE_SUBDIR_NAME }}
          fi
          if [ -n "${{ steps.createVersion.outputs.major_version_suffix }}" ]; then
            go mod edit -module github.com/${{ github.repository }}/${{ env.MODULE_SUBDIR_NAME }}${{ steps.createVersion.outputs.major_version_suffix }}
          fi
          go mod tidy

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit changes
        id: commit
        run: |
          git add ${{ env.MODULE_SUBDIR_NAME }}
          if git diff --cached --quiet; then
            echo "No changes to commit"
            echo "committed=false" >> $GITHUB_OUTPUT
          else
            git commit -m "Release '${{ env.MODULE_SUBDIR_NAME }}' contract version ${{ steps.createVersion.outputs.new_version }}"
            echo "committed=true" >> $GITHUB_OUTPUT
          fi

      - name: Push changes
        if: steps.commit.outputs.committed == 'true'
        run: git push origin ${{ github.event.repository.default_branch }}

      - name: Create release
        if: steps.commit.outputs.committed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          gh release create "${{ steps.createVersion.outputs.new_version }}" \
            --title "${{ steps.createVersion.outputs.new_version }}" \
            --notes "Release of data contract for Identity Management service." \
            --target "$COMMIT_SHA"