name: Release IM contract

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: 'What type of new version to release?'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
        default: minor

permissions:
  contents: write

jobs:
  generate-im-go:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: im
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up buf
        uses: bufbuild/buf-action@v1
        with:
          setup_only: true

      - name: Generate stubs
        run: buf generate --template ../buf.gen.yaml

      - name: Initialize or update Go module
        working-directory: im/gen/go
        run: |
          if [ ! -f go.mod ]; then
            go mod init github.com/Edhouse-SW-Miners/nucleus-contract-poc/im/gen/go
          fi
          go mod tidy

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest version tag and increase ${{ inputs.versionType }} version
        id: createVersion
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --list 'im/v*' --sort=-v:refname | head -n 1)
          echo "Latest tag: $LATEST_TAG"
          VERSION=${LATEST_TAG#im/v}
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            major=0
            minor=1
            patch=0
          else
            IFS='.' read -r major minor patch <<< "$VERSION"
          fi
          case "${{ inputs.versionType }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          NEW_VERSION="im/v$major.$minor.$patch"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit changes
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Release IM contract version ${{ steps.createVersion.outputs.new_version }}"
          fi

      - name: Push changes
        run: git push origin ${{ github.event.repository.default_branch }}

      - name: Create tag
        run: |
          TAG_EXISTS=$(git tag --list "${{ steps.createVersion.outputs.new_version }}")
          if [ -z "$TAG_EXISTS" ]; then
            git tag ${{ steps.createVersion.outputs.new_version }}
            git push origin ${{ steps.createVersion.outputs.new_version }}
          else
            echo "Tag ${{ steps.createVersion.outputs.new_version }} already exists. Skipping tag creation."
          fi